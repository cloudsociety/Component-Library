/*------------------------------------*\
#LAYOUTSIDEBAR

Assumes that sidebar will either be a
1/3-2/3 layout or 2/3-1/3 layout.
\*------------------------------------*/

// import variable file and use that instead.
$spacing-large: 3rem;

.layoutSidebar {
  overflow: hidden;
}

/*
 * +------------+-----------------------+
 * |            |                       |
 * |     a      |           b           |
 * |            |                       |
 * +------------+-----------------------+
 */
.layoutSidebar > * {
  display: flex;
  flex-wrap: wrap;
  // Reduce top/bottom margins.
  margin: calc(#{$spacing-large} / 4 * -1) calc(#{$spacing-large} / 2 * -1);
}

/*
 * +------------------------+-----------+
 * |                        |           |
 * |            a           |     b     |
 * |                        |           |
 * +------------------------+-----------+
 *
 * Warning: Changing source order doesn't change tab order.
 * AT users that also view screen might be confused.
 */
// Sidebar displayed second only on wide viewports.
.layoutSidebar--right-for-desktop > *,
.layoutSidebar--swap-order > * {
  flex-direction: row-reverse;
}
// Sidebar displayed second everywhere (except AT devices).
.layoutSidebar--right-for-all > * > :last-child {
  order: 1;
}

.layoutSidebar > * > *,
.layoutSidebar.layoutSidebar--swap-order > * > :last-child {
  flex-grow: 1;
  // To get the "subtrahend":
  // total width of gaps: 4rem * 2 gaps (assuming 3 column grid)
  // total gap width / total columns: 8rem / 2 columns (one column spans two grid columns)
  flex-basis: calc(33.333% - #{$spacing-large});
  // Set min-width on smaller column to avoid overflow on smaller screens.
  // min-width: 13rem;
  margin: calc(#{$spacing-large} / 4) calc(#{$spacing-large} / 2);
}

.layoutSidebar > * > :last-child,
.layoutSidebar.layoutSidebar--swap-order > * > :first-child {
  // Need to tell the second element how big to be.
  // Same math as above to get "subtrahend".
  flex-basis: calc(66.667% - #{$spacing-large});
}
